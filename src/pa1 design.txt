+--------------------+
|        CS 140      |
| PROJECT 1: THREADS |
|   DESIGN DOCUMENT  |
+--------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Karthik Bodapati <kbodapat@buffalo.edu>
Matthew Rwasenge <rwasenge@buffalo.edu>


---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

     ALARM CLOCK
     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
struct thread
{
  /* Owned by thread.c. */
  tid_t tid;                          /* Thread identifier. */
  enum thread_status status;          /* Thread state. */
  char name[16];                      /* Name (for debugging purposes). */
  uint8_t *stack;                     /* Saved stack pointer. */
  int priority;                       /* Priority. */

  /* Time when a thread should be woken, default = -1 */
  int64_t wakeup_time;
  int default_priority;               /* Priority before any donation. */
  fixed_point_t recent_cpu;
  int nice;

  /* List of all locks held by this thread, It is sorted in decreasing order
  of priority. */
  struct list holding_locks;

  /* Array of all thread, this thread donated to,Assuming I dont donate
  more than 30 threads. */
  struct thread *donated_threads[30];
  struct list_elem allelem;          /* List element for all threads list. */

  /* Shared between thread.c and synch.c. */
  struct list_elem elem;              /* List element. */

#ifdef USERPROG
  /* Owned by userprog/process.c. */
  uint32_t *pagedir;                  /* Page directory. */
#endif

  /* Owned by thread.c. */
  unsigned magic;                     /* Detects stack overflow. */
};

"wakeup_time" is the exact tick when the thread should be woken. Default val-
ue for this set to -1. Since this is thread specific, It is written in struct
thread.

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.
When this timer_sleep is called, It first check whether the duration is valid.
If it is <=0, it does nothing. Else it calculates wakeup time as timer_ticks()+
<sleep_duration> and sets thread->wakeup_time to it.

Each tick Running thread check are there any threads to be woken up in this par-
ticular tick.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
When timer_sleep is called, Interrupts are turned off. So no race conditions


>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
When timer_sleep is called, Interrupts are turned off. So no race conditions

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

 PRIORITY SCHEDULING
 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
struct thread
{
  /* Owned by thread.c. */
  tid_t tid;                          /* Thread identifier. */
  enum thread_status status;          /* Thread state. */
  char name[16];                      /* Name (for debugging purposes). */
  uint8_t *stack;                     /* Saved stack pointer. */
  int priority;                       /* Priority. */

  /* Time when a thread should be woken, default = -1 */
  int64_t wakeup_time;
  int default_priority;               /* Priority before any donation. */
  fixed_point_t recent_cpu;
  int nice;

  /* List of all locks held by this thread, It is sorted in decreasing order
  of priority. */
  struct list holding_locks;

  /* Array of all thread, this thread donated to,Assuming I dont donate
  more than 30 threads. */
  struct thread *donated_threads[30];
  struct list_elem allelem;          /* List element for all threads list. */

  /* Shared between thread.c and synch.c. */
  struct list_elem elem;              /* List element. */

#ifdef USERPROG
  /* Owned by userprog/process.c. */
  uint32_t *pagedir;                  /* Page directory. */
#endif

  /* Owned by thread.c. */
  unsigned magic;                     /* Detects stack overflow. */
};

holding_locks - This is a list of locks this thread is holding
default_priority - Priority before donation, Default is -1. Once donation is
                  made this is changes to original priority
donated_threads[30] - Array of threads, to which priority id currently
                  being donated, Assumed that a thread wont donate to more
                  that 30 threads



>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

When a thread donates its priority, it add the receiving thread to
donation_thread array and when the lock is acquired, it removes the thread from
donated list.

We added a max_priority to lock struct, this max_priority is priority of all
waiting threads with highest priority, So we choose default priority if thread
is holding no locks. If thread is holding locks then new priority will be the
lock's max_priority

In Nested donation, tell_donated_threads() function check if any threads have
same priority if so it recursively tells to the threads that is donating and so
on. It also updates max_priorities of locks, Since max_priority is highest
priority of all threads that are waiting.



---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?
Added priority to the struct. and Sorted the list before popping from the front

Ready_list is sorted by priority and next_thread_to_run function chooses highes-
t thread priority_compare

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?
When Lock Acquire is called,
If there is no holder it takes and does sema_down else
If I lock's max_priority (highest priority thread waiting for the lock) is
less than current thread It tell all the threads lock->holder donated that it is
updating its priority. If this is first donation, it stores original priority as
default priority then it add lock->holder to its donated_threads array, and does
sema_down. Once the lock is acquired, it add this lock to holding_locks list

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.
When lock_release is called, It removes the lock from holding_locks and it gives
up its priority donation (if it got any). If the thread is holding any locks
then it sets lock->max_priority as its new priority or sets default_priority as
new priority. And tells the donated_threads about this change and does sema_up

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
Having a donated_threads array and having locks Max priorities felt,
its simpler to implement and easy to debug.

  ADVANCED SCHEDULER
  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
struct thread
{
  /* Owned by thread.c. */
  tid_t tid;                          /* Thread identifier. */
  enum thread_status status;          /* Thread state. */
  char name[16];                      /* Name (for debugging purposes). */
  uint8_t *stack;                     /* Saved stack pointer. */
  int priority;                       /* Priority. */

  /* Time when a thread should be woken, default = -1 */
  int64_t wakeup_time;
  int default_priority;               /* Priority before any donation. */
  fixed_point_t recent_cpu;
  int nice;

  /* List of all locks held by this thread, It is sorted in decreasing order
  of priority. */
  struct list holding_locks;

  /* Array of all thread, this thread donated to,Assuming I dont donate
  more than 30 threads. */
  struct thread *donated_threads[30];
  struct list_elem allelem;          /* List element for all threads list. */

  /* Shared between thread.c and synch.c. */
  struct list_elem elem;              /* List element. */

#ifdef USERPROG
  /* Owned by userprog/process.c. */
  uint32_t *pagedir;                  /* Page directory. */
#endif

  /* Owned by thread.c. */
  unsigned magic;                     /* Detects stack overflow. */
};

nice -> Used to store thread's nice value
recent_cpu -> (fixed_point_t) used to Store recent_cpu

static fixed_point_t load_avg;
load_avg -> (fixed_point_t) Used for calculating load average

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
0
4
8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?
Used the default given, file. Haven't edited anything

   SURVEY QUESTIONS
   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
